package shell_circulaire;

import java.awt.event.KeyEvent;
import java.io.File;
import java.net.URL;

import org.apache.log4j.ConsoleAppender;
import org.apache.log4j.Level;
import org.apache.log4j.Logger;
import org.apache.log4j.SimpleLayout;
import org.mt4j.MTApplication;
import org.mt4j.components.TransformSpace;
import org.mt4j.components.visibleComponents.font.FontManager;
import org.mt4j.components.visibleComponents.font.IFont;
import org.mt4j.components.visibleComponents.shapes.MTPolygon;
import org.mt4j.components.visibleComponents.shapes.MTRectangle;
import org.mt4j.components.visibleComponents.widgets.MTCircularList;
import org.mt4j.components.visibleComponents.widgets.MTList;
import org.mt4j.components.visibleComponents.widgets.MTListCell;
import org.mt4j.components.visibleComponents.widgets.MTSceneMenu;
import org.mt4j.components.visibleComponents.widgets.MTSceneWindow;
import org.mt4j.components.visibleComponents.widgets.MTTextArea;
import org.mt4j.input.gestureAction.InertiaCircuDragAction;
import org.mt4j.input.gestureAction.InertiaDragAction;
import org.mt4j.input.inputProcessors.IGestureEventListener;
import org.mt4j.input.inputProcessors.MTGestureEvent;
import org.mt4j.input.inputProcessors.componentProcessors.dragProcessor.DragProcessor;
import org.mt4j.input.inputProcessors.componentProcessors.tapProcessor.TapEvent;
import org.mt4j.input.inputProcessors.componentProcessors.tapProcessor.TapProcessor;
import org.mt4j.input.inputProcessors.globalProcessors.CursorTracer;
import org.mt4j.sceneManagement.AbstractScene;
import org.mt4j.sceneManagement.Iscene;
import org.mt4j.sceneManagement.transition.BlendTransition;
import org.mt4j.sceneManagement.transition.FadeTransition;
import org.mt4j.util.MTColor;
import org.mt4j.util.math.ToolsMath;
import org.mt4j.util.math.Vector3D;
import org.mt4j.util.math.Vertex;
import org.mt4j.util.opengl.GLFBO;
import org.mt4j.util.opengl.GLTexture;
import org.mt4j.util.opengl.GLTextureSettings;
import org.mt4j.util.opengl.GLTexture.WRAP_MODE;

import circularPictures.CircularPictureScene;

import processing.core.PApplet;
import processing.core.PGraphics;
import processing.core.PImage;
import scenes.WaterSceneExportObf;
import shell_circulaire.ICreateScene;
import sun.misc.GC;
import advanced.drawing.MainDrawingScene;
import advanced.flickrMT.FlickrScene;
import advanced.fluidSimulator.FluidSimulationScene;
import advanced.models3D.Models3DScene;
import advanced.modestMapsMT.MapsScene;
import advanced.physics.scenes.AirHockeyScene;
import advanced.physics.scenes.PhysicsScene;
import advanced.puzzle.PuzzleScene;
import advanced.space3D.Space3DScene;
import advanced.touchTail.TouchTailScene;


import org.mt4j.MTApplication;
import org.mt4j.components.TransformSpace;
import org.mt4j.components.visibleComponents.shapes.MTRoundRectangle;
import org.mt4j.input.gestureAction.DefaultButtonClickAction;
import org.mt4j.input.inputProcessors.IGestureEventListener;
import org.mt4j.input.inputProcessors.MTGestureEvent;
import org.mt4j.input.inputProcessors.componentProcessors.tapProcessor.TapEvent;
import org.mt4j.input.inputProcessors.componentProcessors.tapProcessor.TapProcessor;
import org.mt4j.input.inputProcessors.globalProcessors.CursorTracer;
import org.mt4j.sceneManagement.AbstractScene;
import org.mt4j.util.MT4jSettings;
import org.mt4j.util.MTColor;
import org.mt4j.util.math.Vector3D;

/**
 * The Class MTShellScene. A scene which displays other scenes icons and loads them.
 * 
 * @author Christopher Ruff
 */
public class CircularShellScene extends AbstractScene {
	/** The Constant logger. */
	private static final Logger logger = Logger.getLogger(CircularShellScene.class.getName());
	static{
		//		logger.setLevel(Level.WARN);
		//		logger.setLevel(Level.DEBUG);
		logger.setLevel(Level.INFO);
		SimpleLayout l = new SimpleLayout();
		ConsoleAppender ca = new ConsoleAppender(l);
		logger.addAppender(ca);
	}

	/** The app. */
	private MTApplication app;

	/** The has fbo. */
	private boolean hasFBO;

	/** The list. */
	private MTCircularList list;

	/** The font. */
	private IFont font;

	/** The preferred icon height. */
	private int preferredIconHeight;

	/** The gap between icon and reflection. */
	private int gapBetweenIconAndReflection;

	/** The display height of reflection. */
	private float displayHeightOfReflection;

	/** The list width. */
	private float listWidth;

	/** The list height. */
	private int listHeight;

	/** The preferred icon width. */
	private int preferredIconWidth;

	/** The switch directly to scene. */
	private boolean switchDirectlyToScene = false
;

	private boolean useBackgroundGradient = true;

	//TODO (dont allow throwing stuff out of the screen) or destroy it then
	//TODO loading screen

	/**
	 * Instantiates a new mT shell scene.
	 * 
	 * @param mtApplication the mt application
	 * @param name the name
	 */
	public CircularShellScene(MTApplication mtApplication, String name) {
		super(mtApplication, name);
		this.app = mtApplication;
		this.hasFBO = GLFBO.isSupported(app);
		//		this.hasFBO = false; // TEST
		//IF we have no FBO directly switch to scene and ignore setting
		this.switchDirectlyToScene = !this.hasFBO? true : switchDirectlyToScene; 

		this.registerGlobalInputProcessor(new CursorTracer(app, this));

		//		this.setClearColor(new MTColor(230,230,230,255));
		//		this.setClearColor(new MTColor(30,30,30,255));
		this.setClearColor(new MTColor(0,0,0,255));

		//BACKGROUND GRADIENT
		/*if (this.useBackgroundGradient){
			Vertex[] vertices = new Vertex[]{
					new Vertex(0, 			app.height/3f,	0, 	0,0,0,255),
					new Vertex(app.width, 	app.height/3,	0, 	0,0,0,255),
					new Vertex(app.width, 	app.height/1.7f,0,	170,170,140,255),
					new Vertex(0,			app.height/1.7f,0,	170,170,140,255),
					new Vertex(0, 			app.height/3,	0,	0,0,0,255),
			};
			MTPolygon p = new MTPolygon(vertices, getMTApplication());
			p.setName("upper gradient");
			p.setNoStroke(true);
			p.generateAndUseDisplayLists();
			p.setPickable(false);
			this.getCanvas().addChild(p);

			Vertex[] vertices2 = new Vertex[]{
					new Vertex(0, 			app.height/1.7f,	0, 	170,170,140,255),
					new Vertex(app.width, 	app.height/1.7f,	0, 	170,170,140,255),
					new Vertex(app.width, 	app.height,			0,	0,0,0,255),
					new Vertex(0,			app.height,			0,	0,0,0,255),
					new Vertex(0, 			app.height/1.7f,	0, 	170,170,140,255),
			};
			MTPolygon p2 = new MTPolygon(vertices2, getMTApplication());
			p2.setNoStroke(true);
			p2.generateAndUseDisplayLists();
			p2.setPickable(false);
			this.getCanvas().addChild(p2);
		}*/
		//BACKGROUND

		preferredIconWidth = 128;//256;
		preferredIconHeight = 96;//192;
		gapBetweenIconAndReflection = 6;
		displayHeightOfReflection = preferredIconHeight * 0.6f;

		//CREATE LIST
		//listWidth = preferredIconHeight + displayHeightOfReflection + gapBetweenIconAndReflection;
		//		listHeight = app.width - 50;
		//listHeight = app.width;
		PImage background = app.loadImage(this.getPathToIcons() + "shell_background.jpg");
		listWidth = app.width;
		listHeight = app.height;
		list = new MTCircularList(0,0, listWidth, listHeight, 0, mtApplication);
		//list.setFillColor(new MTColor(150,150,150,200));
		//list.setNoFill(true);
		list.setNoStroke(true);
		list.setTexture(background);


		/*//List ends fade images //Background gradient has to be set to false!
		PImage gradImage = app.loadImage(this.getPathToIcons() + "ubuntu.jpg");
		MTRectangle grad1 = new MTRectangle(gradImage, app);
		grad1.setUseDirectGL(true);
		grad1.setNoStroke(true);
		grad1.setPickable(false);
		list.addChild(grad1);
		grad1.setFillColor(this.getClearColor());

		MTRectangle grad2 = new MTRectangle(0, listHeight-gradImage.height , gradImage.width, gradImage.height, app);
		grad2.rotateZ(grad2.getCenterPointLocal(), 180, TransformSpace.LOCAL);
		grad2.setTexture(gradImage);
		grad2.setNoStroke(true);
		grad2.setPickable(false);
		list.addChild(grad2);
		grad2.setFillColor(this.getClearColor());
		 */

		//TODO does the font exist on all platforms? fallback to arial.ttf?
		font = FontManager.getInstance().createFont(app, "arial", 16, MTColor.BLACK, MTColor.BLACK, true);
		//		font = FontManager.getInstance().createFont(app, "arial.ttf", 18, new MTColor(0,0,0), new MTColor(0,0,0));


		this.addScene(new ICreateScene() {
			public Iscene getNewScene() {
				return new TouchTailScene(app, "Touch Tails");
			}
			public String getTitle() {
				return "Touch Tails";
			}
		}, app.loadImage(this.getPathToIcons() + "touchtails_s.png"));

		//		this.addScene(new ICreateScene() {
		//			public Iscene getNewScene() {
		//				return new MapsScene(app, "Maps");
		//			}
		//			public String getTitle() {
		//				return "Maps";
		//			}
		//		}, app.loadImage(this.getPathToIcons() + "maps_ss.png"));

		//We look in the folders to create instances of virtual view for each folder
		final File virtualViewDirectory = new File(System.getProperty("user.dir" ) + System.getProperty("file.separator" ) + "data"+ System.getProperty("file.separator" ) + "VirtualViews" + System.getProperty("file.separator" ));
		final String viewsNames[] = virtualViewDirectory.list();
		for (int i = 0; i < viewsNames.length ; i++) {
			//The name of the view taken from the name of the folder
			final String viewName = viewsNames[i];

			//creation of the scene
			this.addScene(new ICreateScene() {
				public Iscene getNewScene() {
					return new CircularPictureScene(app, viewName, virtualViewDirectory.getAbsolutePath() + System.getProperty("file.separator" ) + viewName);
				}
				public String getTitle() {
					return viewName;
				}
			}, app.loadImage(virtualViewDirectory.getAbsolutePath() + System.getProperty("file.separator" ) + viewName + "/thumbnail.jpg"));
		}

		this.addScene(new ICreateScene() {
			public Iscene getNewScene() {
				return new AirHockeyScene(app, "Jeu du palet");
			}
			public String getTitle() {
				return "Jeu du palet";
			}
		}, app.loadImage(this.getPathToIcons() + "airhockey_s.png"));

		//		this.addScene(new ICreateScene() {
		//			public Iscene getNewScene() {
		//				return new PuzzleScene(app, "Puzzle");
		//			}
		//			public String getTitle() {
		//				return "Puzzle";
		//			}
		//		}, app.loadImage(this.getPathToIcons() + "puzz.png"));

		//		if (this.hasFBO){
		//			this.addScene(new ICreateScene() {
		//				public Iscene getNewScene() {
		//					return new MainDrawingScene(app, "MT Paint");
		//				}
		//				public String getTitle() {
		//					return "MT Paint";
		//				}
		//			}, app.loadImage(this.getPathToIcons() + "drawing_s.png"));
		//		}

		/*this.addScene(new ICreateScene() {
			public Iscene getNewScene() {
				return new FlickrScene(app, "Flickr");
			}
			public String getTitle() {
				return "Photo Search";
			}
		}, app.loadImage(this.getPathToIcons() + "flickr_s.png"));
		 */
		this.addScene(new ICreateScene() {
			public Iscene getNewScene() {
				return new WaterSceneExportObf(app, "Virtual Water"); 
			}
			public String getTitle() {
				return "Virtual Water";
			}
		}, app.loadImage(this.getPathToIcons() + "water_s.png"));

		this.addScene(new ICreateScene() {
			public Iscene getNewScene() {
				return new FluidSimulationScene(app, "Virtual Particles");
			}
			public String getTitle() {
				return "Virtual Particles";
			}
		}, app.loadImage(this.getPathToIcons() + "fluidparticles_s.png"));

		this.addScene(new ICreateScene() {
			public Iscene getNewScene() {
				return new Models3DScene(app, "Virtual 3D");
			}
			public String getTitle() {
				return "Virtual 3D";
			}
		}, app.loadImage(this.getPathToIcons() + "teapot.jpg"));

		/*this.addScene(new ICreateScene() {
			public Iscene getNewScene() {
				return new PhysicsScene(app, "Physics Playground");
			}
			public String getTitle() {
				return "Physics Playground";
			}
		}, app.loadImage(this.getPathToIcons() + "pyhsics_s.png"));

		/*
		this.addScene(new ICreateScene() {
			public Iscene getNewScene() {
				return new Space3DScene(app, "Earth 3D");
			}
			public String getTitle() {
				return "Earth 3D";
			}
		}, app.loadImage(this.getPathToIcons() + "earth_s.png"));

		 */
		getCanvas().addChild(list);

		list.rotateZ(list.getCenterPointLocal(), -90, TransformSpace.LOCAL);
		//		list.setPositionGlobal(new Vector3D(app.width/2f, app.height - list.getHeightXY(TransformSpace.GLOBAL) - 1));
		list.setPositionGlobal(new Vector3D(app.width/2f, app.height/2f));
		//		list.setAnchor(PositionAnchor.UPPER_LEFT);
		//		list.setPositionGlobal(new Vector3D(app.width/2f - list.getWidthXY(TransformSpace.GLOBAL)/2f, app.height - 20));
		getCanvas().setFrustumCulling(true); 

		//Scene transition effect
		if (this.hasFBO){
			this.setTransition(new BlendTransition(app, 3000));	
		}else{
			this.setTransition(new FadeTransition(app, 3000));	
		}
	}


	/**
	 * Gets the path to icons.
	 * 
	 * @return the path to icons
	 */
	private String getPathToIcons(){
		//		return System.getProperty("user.dir")+File.separator+"examples"+File.separator+"advanced"+File.separator+"mtShell"+ File.separator +"data"+ File.separator+"images"+File.separator; 
		//Load from classpath
		return  System.getProperty("user.dir" ) + System.getProperty("file.separator" ) + "data"+ System.getProperty("file.separator" ) + "shell" + System.getProperty("file.separator" );
	}


	/**
	 * Adds the tap processor.
	 * 
	 * @param cell the cell
	 * @param createScene the create scene
	 */
	private void addTapProcessor(MTListCell cell, final ICreateScene createScene){
		cell.registerInputProcessor(new TapProcessor(app, 15));
		cell.addGestureListener(TapProcessor.class, new IGestureEventListener() {
			public boolean processGestureEvent(MTGestureEvent ge) {
				TapEvent te = (TapEvent)ge;
				if (te.isTapped()){
					//System.out.println("Clicked cell: " + te.getTargetComponent());
					final Iscene scene = createScene.getNewScene();

					if (!switchDirectlyToScene){//We have FBO support -> show scene in a window first

						if (hasFBO && scene instanceof AbstractScene){
							((AbstractScene) scene).setTransition(new BlendTransition(app, 300));	
						}

						final MTSceneWindow sceneWindow = new MTSceneWindow(scene, 100,100, app);
						Vector3D center = new Vector3D(app.width/2, app.height/2);
						Vector3D pos = new Vector3D(te.getLocationOnScreen().x -center.x, te.getLocationOnScreen().y - center.y, 0);
						Vector3D base = new Vector3D(app.width/2 - center.x, app.height - center.y, 0);
						double angle = Math.atan2(pos.y,pos.x) - Math.atan2(base.y,base.x);
						sceneWindow.rotateZGlobal(center, (float) (ToolsMath.RAD_TO_DEG * angle));
						sceneWindow.setPositionRelativeToParent(te.getLocationOnScreen());
						sceneWindow.setFillColor(new MTColor(50,50,50,200));
						//set the size of the app in the shell 
						sceneWindow.scaleGlobal(0.40f, 0.40f, 1, sceneWindow.getCenterPointGlobal());
						sceneWindow.addGestureListener(DragProcessor.class, new InertiaCircuDragAction(app));
						getCanvas().addChild(sceneWindow);
					}else{
						//No FBO available -> change to the new scene fullscreen directly

						float menuWidth = 84;
						float menuHeight = 84;
						MTSceneMenu sceneMenu = new MTSceneMenu(scene, (app.getWidth()-menuWidth)/2, (app.getHeight()-menuHeight)/2, menuWidth, menuHeight, app);
						sceneMenu.addToScene();

						app.addScene(scene);
						app.pushScene();
						app.changeScene(scene);
					}
				}
				return false;
			}
		});
	}


	/**
	 * Adds the scene.
	 * 
	 * @param sceneToCreate the scene to create
	 * @param icon the icon
	 */
	public void addScene(ICreateScene sceneToCreate, PImage icon){
		//		System.out.println("Width: " + width + " Height:" + height);

		float border = 1;
		float bothBorders = 2*border;
		float topShift = 20;

		float listCellWidth = listWidth;		
		float realListCellWidth = listHeight - bothBorders - 220;
		float listCellHeight = preferredIconWidth - border;
		//float listCellHeight = preferredIconWidth ;
		//System.out.println("listCellHeight: " + listCellHeight + " realListCellWidth:" + realListCellWidth);

		MTListCell cell = new MTListCell(realListCellWidth ,  listCellHeight, app);
		cell.setNoFill(true);
		cell.setNoStroke(true);

		//		/*
		Vertex[] vertices = new Vertex[]{
				new Vertex(realListCellWidth-topShift, 				border,		  		0, 0,0),
				new Vertex(realListCellWidth-topShift, 				 listCellHeight -border,	0, 1,0),
				new Vertex(realListCellWidth-topShift - preferredIconHeight, listCellHeight -border,	0, 1,1),
				new Vertex(realListCellWidth-topShift - preferredIconHeight,	border,		  		0, 0,1),
				new Vertex(realListCellWidth-topShift, 				border,		  		0, 0,0),
		};
		MTPolygon p = new MTPolygon(vertices, getMTApplication());
		p.setTexture(icon);
		//		p.setNoStroke(true);
		//		p.setStrokeColor(new MTColor(150,150,150, 255));
		p.setStrokeColor(new MTColor(80,80,80, 255));


		cell.addChild(p);

		list.addListElement(cell);
		addTapProcessor(cell, sceneToCreate);
		//		*/

		/*
		MTRectangle rect = new MTRectangle(icon, getMTApplication());
		rect.setUseDirectGL(true);
//		rect.setNoStroke(true);
		rect.rotateZ(rect.getCenterPointLocal(), 90, TransformSpace.LOCAL);

		MTRectangle reflectionRect = new MTRectangle(0, height, width, height, getMTApplication());
		reflectionRect.setTexture(reflection);
		reflectionRect.setUseDirectGL(true);
//		reflectionRect.setNoStroke(true);
		reflectionRect.rotateZ(rect.getCenterPointLocal(), 90, TransformSpace.LOCAL);

		cell.addChild(rect);
		cell.addChild(reflectionRect);
		list.addListElement(cell);
		addTapProcessor(cell, sceneToCreate);

		rect.setAnchor(PositionAnchor.UPPER_LEFT);
		reflectionRect.setAnchor(PositionAnchor.UPPER_LEFT);

		PositionAnchor oldCellAnchor = cell.getAnchor();
		cell.setAnchor(PositionAnchor.UPPER_LEFT);

		rect.setPositionRelativeToParent(cell.getPosition(TransformSpace.LOCAL));
		rect.translate(new Vector3D(realListCellWidth - topShift, 0));

		reflectionRect.setPositionRelativeToParent(cell.getPosition(TransformSpace.LOCAL));
		reflectionRect.translate(new Vector3D(realListCellWidth - topShift - icon.height - gapBetweenIconAndReflection, 0));

		cell.setAnchor(oldCellAnchor);

//		rect.setPositionRelativeToParent(cell.getCenterPointLocal());

//		MTRoundRectangle r = new MTRoundRectangle(0, 0, 0, listCellWidth, listCellHeight, 30, 30, getMTApplication());
//		cell.addChild(r);

//		getCanvas().addChild(rect);
		 */

		///Add scene title
		MTTextArea text = new MTTextArea(app, font);
		text.setFillColor(new MTColor(150,150,250,200));
		text.setNoFill(true);
		text.setNoStroke(true);
		text.setText(sceneToCreate.getTitle());
		text.rotateZ(text.getCenterPointLocal(), 90, TransformSpace.LOCAL);
		cell.addChild(text);

		//		text.setAnchor(PositionAnchor.CENTER);
		//		PositionAnchor oldCellAnchor = cell.getAnchor();
		//		cell.setAnchor(PositionAnchor.CENTER);
		//		text.setPositionRelativeToParent(cell.getPosition(TransformSpace.LOCAL));
		//		text.translate(new Vector3D(realListCellWidth - topShift, 0));
		//		cell.setAnchor(oldCellAnchor);

		text.setPositionRelativeToParent(cell.getCenterPointLocal());
		text.translate(new Vector3D(realListCellWidth*0.5f - text.getHeightXY(TransformSpace.LOCAL)*0.5f, 0));
		///
	}


	/* (non-Javadoc)
	 * @see org.mt4j.sceneManagement.AbstractScene#init()
	 */
	@Override
	public void init() {
		getMTApplication().registerKeyEvent(this);
	}

	/* (non-Javadoc)
	 * @see org.mt4j.sceneManagement.AbstractScene#shutDown()
	 */
	@Override
	public void shutDown() {
		getMTApplication().unregisterKeyEvent(this);
	}

	/**
	 * Key event.
	 * 
	 * @param e the e
	 */
	public void keyEvent(KeyEvent e){
		int evtID = e.getID();
		if (evtID != KeyEvent.KEY_PRESSED)
			return;
		switch (e.getKeyCode()){
		case KeyEvent.VK_F:
			System.out.println("FPS: " + getMTApplication().frameRate);
			break;
		case KeyEvent.VK_M:
			System.out.println("Max memory: " + Runtime.getRuntime().maxMemory() + " <-> Free memory: " + Runtime.getRuntime().freeMemory());
			break;	
		case KeyEvent.VK_C:
			getMTApplication().invokeLater(new Runnable() {
				public void run() {
					System.gc();
					GC.maxObjectInspectionAge();
					System.runFinalization();
				}
			});
			break;
		default:
			break;
		}
	}

		private Vector3D centerLocal;
		private float widthLocal;
		private float border;
		private float heightLocal;
		private int barWidth;
		private float barLength;


	
}
